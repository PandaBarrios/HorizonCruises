@model HorizonCruises.Application.DTOs.BarcoDTO

@{
    ViewData["Title"] = "Crear Barco";
    var habitacionesList = ViewBag.Habitaciones as SelectList;
}

<div class="container mt-5">
    <div class="card shadow-lg rounded-4">
        <div class="card-header bg-primary text-white text-center">
            <h2 class="mb-0">Crear Nuevo Barco</h2>
        </div>
        <div class="card-body px-5 py-4">
            <form asp-action="Create" method="post">
                <div asp-validation-summary="All" class="alert alert-danger"></div>

                <!-- Nombre -->
                <div class="mb-3">
                    <label asp-for="Nombre" class="form-label fw-bold"></label>
                    <input asp-for="Nombre" class="form-control" placeholder="Ej. Estrella del Mar" />
                    <span asp-validation-for="Nombre" class="text-danger"></span>
                </div>

                <!-- Descripción -->
                <div class="mb-3">
                    <label asp-for="Descripcion" class="form-label fw-bold"></label>
                    <textarea asp-for="Descripcion" class="form-control" rows="3" placeholder="Describe el barco..."></textarea>
                    <span asp-validation-for="Descripcion" class="text-danger"></span>
                </div>

                <!-- Capacidad de Huéspedes -->
                <div class="mb-3">
                    <label asp-for="CapacidadHuespedes" class="form-label fw-bold"></label>
                    <input asp-for="CapacidadHuespedes" class="form-control" min="1" />
                    <span asp-validation-for="CapacidadHuespedes" class="text-danger"></span>
                </div>

                <!-- Habitaciones -->
                <div class="mt-4 mb-3">
                    <h5 class="fw-bold">Habitaciones</h5>
                    <button type="button" class="btn btn-outline-success btn-sm mb-3" onclick="agregarHabitacion()">
                        <i class="bi bi-plus-circle"></i> Agregar Habitación
                    </button>
                    <div id="habitacionesList"></div>
                </div>

        <!-- Botón Guardar -->
        <div class="text-center mt-4">
            <input type="submit" value="Crear Barco" class="btn btn-primary" />
            <a asp-action="IndexAdmin" class="btn btn-secondary ms-2">Volver a la lista</a>
        </div>
    </form>
</div>


@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")

    <script>
        let index = 0;

        const habitacionesDisponibles = [
        @foreach (var hab in habitacionesList)
        {
            <text>{ value: "@hab.Value", text: "@hab.Text" },</text>
        }
        ];

        function agregarHabitacion() {
            const container = document.getElementById("habitacionesList");

            const selects = document.querySelectorAll(".habitacion-select");
            const seleccionadas = Array.from(selects).map(s => s.value);
            const disponibles = habitacionesDisponibles.filter(h => !seleccionadas.includes(h.value));

            if (disponibles.length === 0) {
                Swal.fire({
                    icon: 'error',
                    title: 'Habitaciones',
                    text: 'Ya no hay más habitaciones disponibles para agregar.',
                    confirmButtonColor: '#d33',
                    confirmButtonText: 'Entendido'
                });
                return;
            }

            const div = document.createElement("div");
            div.classList.add("row", "mb-2", "align-items-end");

            let opciones = `<option value="">Seleccione una habitación</option>`;
            disponibles.forEach(h => {
                opciones += `<option value="${h.value}">${h.text}</option>`;
            });

            div.innerHTML = `
                <div class="col-md-6">
                    <select class="form-select habitacion-select" name="BarcoHabitaciones[${index}].IdHabitacion" required>
                        ${opciones}
                    </select>
                </div>
                <div class="col-md-4">
                    <input type="number" name="BarcoHabitaciones[${index}].TotalHabitacionesDisponibles"
                        class="form-control cantidad-habitacion"
                        placeholder="Total disponibles" min="1" required />
                </div>
                <div class="col-md-2">
                    <button type="button" class="btn btn-danger" onclick="eliminarHabitacion(this)">X</button>
                </div>
            `;

            container.appendChild(div);
            index++;
        }

        function eliminarHabitacion(btn) {
            btn.closest('.row').remove();
        }

        document.querySelector("form").addEventListener("submit", function (e) {
            const selects = document.querySelectorAll(".habitacion-select");
            const cantidades = document.querySelectorAll(".cantidad-habitacion");
            const values = [];
            let totalHabitaciones = 0;

            const capacidadInput = document.getElementById("CapacidadHuespedes");
            const capacidad = parseInt(capacidadInput?.value) || 0;

            if (selects.length === 0) {
                e.preventDefault();
                Swal.fire({
                    icon: 'error',
                    title: 'Habitaciones',
                    text: 'Debe agregar al menos una habitación.',
                    confirmButtonColor: '#d33',
                    confirmButtonText: 'Entendido'
                });
                return;
            }

            for (let i = 0; i < selects.length; i++) {
                const value = selects[i].value;
                const cantidad = parseInt(cantidades[i].value);

                if (!value) {
                    e.preventDefault();
                    Swal.fire({
                        icon: 'error',
                        title: 'Habitación no seleccionada',
                        text: 'Debe seleccionar una habitación en cada fila.',
                        confirmButtonColor: '#d33',
                        confirmButtonText: 'Entendido'
                    });
                    return;
                }

                if (values.includes(value)) {
                    e.preventDefault();
                    Swal.fire({
                        icon: 'error',
                        title: 'Habitación duplicada',
                        text: 'No puedes seleccionar la misma habitación más de una vez.',
                        confirmButtonColor: '#d33',
                        confirmButtonText: 'Entendido'
                    });
                    return;
                }

                if (!cantidad || cantidad < 1) {
                    e.preventDefault();
                    Swal.fire({
                        icon: 'error',
                        title: 'Cantidad inválida',
                        text: 'La cantidad de habitaciones debe ser mayor a 0.',
                        confirmButtonColor: '#d33',
                        confirmButtonText: 'Entendido'
                    });
                    return;
                }

                values.push(value);
                totalHabitaciones += cantidad;
            }

            if (capacidad > 0 && totalHabitaciones > capacidad) {
                e.preventDefault();
                Swal.fire({
                    icon: 'error',
                    title: 'Capacidad excedida',
                    text: `El total de habitaciones asignadas (${totalHabitaciones}) supera la capacidad máxima del barco (${capacidad}).`,
                    confirmButtonColor: '#d33',
                    confirmButtonText: 'Entendido'
                });
                return;
            }
        });
    </script>
}
}
